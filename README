				    ____ 
				  .'* *.'
			       __/_*_*(_
			      / _______ \
			     _\_)/___\(_/_ 
			    / _((\- -/))_ \
			    \ \())(-)(()/ /
			     ' \(((()))/ '
			    / ' \)).))/ ' \
			   / _ \ - | - /_  \
			  (   ( .;''';. .'  )
			  _\"__ /    )\ __"/_
			    \/  \   ' /  \/
			     .'  '...' ' )
			      / /  |  \ \
			     / .   .   . \
			    /   .     .   \
			   /   /   |   \   \
			 .'   /    b    '.  '.
		     _.-'    /     Bb     '-. '-._ 
		 _.-'       |      BBb       '-.  '-. 
		(________mrf\____.dBBBb.________)____)

			PROJECT-SECOND STAGE

					Name: Livadaru Alexandru-Valentin
					Group: 323CA

			CONSTANTS

- All the constants used in the program.



			MAIN
	
		INPUT, INPUTLOADER

- Both help me to read from the file and write in the file.
- For the read and write operations I inspired from the skeleton of the
	first homework and also from the tutorial given in the
	previous stage of the homework text.

		MAPBUILDER

- Made this class singleton because we use it only once.
- Used to take the input data and create the "map" of the game.

		VECTORCREATOR

- Takes the player type and it's coordinates from the input and creates
	a player of a certain strategy that is added in the 'players' vector.

		MAIN

- Class used to create the map and the array of players using the input.
- It calls the "createMoves" method from ActionCreator that "plays" the game
- In the end it exposes the output.


		ACTIONCREATOR

- Made this class singleton because we need it only once 

	CREATEMOVES

- Takes every round at a time and it checks for the movement of the player
- Checks if a player is paralysed or immobilised and if it is, it won't play
	any strategy
- Calculate the consequences of the overtime damage of the players
- Checks if a player uses any strategy by calculating the player's hp
- Checks if the players are affected by any angels

	ANGELSEFFECT

- Takes every angel then takes every players and compares their position
- If they are in the same position the player takes the effect given by the
	angel
- Sets the killed by Doomer flag to false for evey player
- If a player is killed by doomer, it won't have is xp set to the one
	at the beginning of the round
	
	ANGELSVECTORCREATOR

- Takes the input and gets the coodinates and the type of player from it
- It adds the instance of the angel created in the angels array

	CHECKFORMOVEMENT

- Sets the new position of the player


	BATTLE

- Takes every pair of players (if a player is a wizard he will strike first)
- Takes the xp from the beginning of the round (for Spawner angel)
- Checks if they are in the same position and if they are not then simulates
	the battle
- Gives the xp to the winning player
- If both players die, they don't receive xp

	CHOOSESTRATEGY

- Calculates the hp of every player and adopts a strategy if it's the case

	XPGIVER

- Gives the xp to the winning player then calculates the level
- It sets the right hp and maxhp

	GROUNDSETTER

- Sets the right type of ground according to the player's coordinates
		



			STRATEGIES

- This package contains the implementation of the two strategies adopted
	by every player.


		~ STRATEGY PATTERN ~

- In the chooseStrategy method from ActionCreator we take every player and
	if the hp is right, he chooses a style of play.
- The method is decided at run time, depending of th type of player and
	its hp.
- GameStrategy interface is implemented by the defensive and offensive
	strategies of every player.




			PLAYERS

		PLAYERSFACTORY

	GETPLAYER

- Takes the input and based on the input, it creates a player.

	
		HUMAN

	CHECKOVERTIMEABILITY

- Checks if the afection is a newly taken one.
- If the player is paralysed and the hit took place in the woods, set the
	overtime ability counter to 6, if not, set it to 3.
- Takes a certain hp and updates the fields.
- If the player is ignited, set the overtime ability counter to 2 and
	update the fields.

- Then it makes the same thing as above, but if their overtime ability is over,
	turn off their paralysed/ignite flags.
- Turn off the new overtime affection and immobility flags.

	WIZARDGAME

- Calculates the hp taken from the victim's life using
	the drain ability.
- For this to happen, we calculate the percentage factor from the formula
	by looking at the level of the atacker, the ground where the action
	took place and the player modificator.
- Checks if there are two wizards fighting because two wizards can't atack
	eachother using deflect.
- If there are not, calculate the damage taken by the ability using the
	homework formula.
- Update the victim's stats.

	PYROGAME

- It calculates the damage of the pyromancer's ability taking into
	consideration the level, the ground and the modifiers.
- Turn on the ignite flag and set the damage taken per round.
- Update the stats of the victim.

	KNIGHTGAME

- It calculates the damage of the knight's ability taking into
	consideration the level, the ground and the modifiers.
- Checks if the victim immediately dies.
- Turn on the immobility flag.
- Update the stats of the victim.

	ROGUEGAME

- It calculates the damage of the rogue's ability taking into
	consideration the level, the ground and the modifiers.
- Checks if the backstab ability is critical or not.
- Turn on the paralysis flag and caluclate the damage taken per round.
- Update the stats of the victim.

	KNIGHT, ROGUE, WIZARD, PYROMANCER

- Created the player with the specific stats of every type of player.

- The DOUBLE DISPATCH concept is used here.

- The player is the 'visitable' BUT also the 'visitor' .

- The methods of the players have all the same name but the program knows
	which method to call using the argument (visitator) and the class
	in which is called (visitable).

			


			ANGELS

- This package contains the implementation of every angel as described
	in the homework text.
- Angel is the "mother" class of all the angels and stores general data
	like coordinates and angel type.

		~ VISITOR PATTERN ~

- The angels are the visitors and the players are the visitables.
- The methods of the players (acceptAngel) have all the same name but the program knows
	which method to call using the argument (visitator) and the class
	in which is called (visitable).

		~ OBSERVER PATTERN ~

- I've changed a bit the pattern so that it suits this program.
- It is a relation of one observer to n subjects.
	

			ADMIN		

		GREATMAGICIAN		

- The Great Magician plays the role of the observer and has fields
	for every angel born, every player hit or helped, and every
	player killed or brought to life.
- The subjects are the angels.
- Every time an angel is created they notify the Great Magician with
	their position.
- Also, when a player suffers an effect from an angel, the magician
	is also notified.


